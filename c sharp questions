Object:
An object is an instance of a class. 
Its basically a block of memory that has been allocated and configured according to the blueprint.
A program can create many objects of the same class

Class:
A class is the definition of an object (or) like a blueprint of a specific object.
It does not actually become an object until it is instantiated. 
It defines the kinds of data and the functionality their objects will have.
Since an abstract class can't be instantiated, no object of that type can created. A sub class would need to be defined in order for an object to create.

Interface: 
An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):
To access the interface methods, the interface must be "implemented" (kinda like inherited) by another class

example
interface TestInterface
    {
        void GetGetMember();
        string Name
        {
            get;
            set;
        }
    }

Encapsulation:
Encapsulation is defined as the wrapping up of data under a single unit. 
It is the mechanism that binds together code and the data it manipulates. 
In a different way, encapsulation is a protective shield that prevents the data from being accessed by the code outside this shield.
Technically in encapsulation, the variables or data of a class are hidden from any other class and can be accessed only through any member function of own class in which they are declared.
As in encapsulation, the data in a class is hidden from other classes, so it is also known as data-hiding.
Encapsulation can be achieved by: Declaring all the variables in the class as private and using C# Properties in the class to set and get the values of variables.

Example:
// C# program to illustrate encapsulation 
using System;   
public class DemoEncap {       
    // private variables declared 
    // these can only be accessed by 
    // public methods of class 
    private String studentName; 
    private int studentAge; 
      
    // using accessors to get and  
    // set the value of studentName 
    public String Name 
    {          
        get
        { 
            return studentName;     
        }           
        set 
        { 
            studentName = value; 
        }           
    }      
    // using accessors to get and  
    // set the value of studentAge 
    public int Age 
    {          
        get 
        { 
            return studentAge;     
        }          
        set 
        { 
            studentAge = value; 
        }          
    } 
} 
  
// Driver Class 
class GFG {      
    // Main Method 
    static public void Main() 
    {          
        // creating object 
        DemoEncap obj = new DemoEncap(); 
  
        // calls set accessor of the property Name,  
        // and pass "Ankita" as value of the  
        // standard field 'value' 
        obj.Name = "Ankita"; 
          
        // calls set accessor of the property Age,  
        // and pass "21" as value of the  
        // standard field 'value' 
        obj.Age = 21; 
  
        // Displaying values of the variables 
        Console.WriteLine("Name: " + obj.Name); 
        Console.WriteLine("Age: " + obj.Age); 
    } 
} 
Output:

Name: Ankita
Age: 21
Explanation: In the above program the class DemoEncap is encapsulated as the variables are declared as private. 
To access these private variables we are using the Name and Age accessors which contains the get and set method to retrieve and set the values of private fields. 
Accessors are defined as public so that they can access in other class.

Advantages of Encapsulation:
Data Hiding: The user will have no idea about the inner implementation of the class. 
        It will not be visible to the user that how the class is stored values in the variables. 
        He only knows that we are passing the values to accessors and variables are getting initialized to that value.
Increased Flexibility: We can make the variables of the class as read-only or write-only depending on our requirement. 
                        If we wish to make the variables as read-only then we have to only use Get Accessor in the code.
                        If we wish to make the variables as write-only then we have to only use Set Accessor.
Reusability: Encapsulation also improves the re-usability and easy to change with new requirements.
Testing code is easy: Encapsulated code is easy to test for unit testing.

Static class:
A static class can only contain static data members, static methods, and a static constructor.
It is not allowed to create objects of the static class. 
Static classes are sealed, means you cannot inherit a static class from another class.

Difference between Abstraction and Encapsulation
 
Abstraction is a process. It is the act of identifying the relevant qualities and behaviors an object should possess. Encapsulation is the mechanism by which the abstraction is implemented.

Abstraction	Encapsulation
Abstraction solves the problem in the design level.	Encapsulation solves the problem in the implementation level.
Abstraction is used for hiding the unwanted data and giving onlyrelevant data.	Encapsulation is hiding the code and data into a single unit toprotect the data from outer world.
Abstraction is set focus on the object instead of how it does it.	Encapsulation means hiding the internal details or mechanics of howan object does something.
Abstraction is outer layout in terms of design.
For Example: - Outer Look of a iPhone, like it has a display screen.	Encapsulation is inner layout in terms of implementation.
For Example: - Inner Implementation detail of a iPhone, how DisplayScreen are connect with each other using circuits

Polymorphism:
Polymorphism enables us to invoke derived class methods using a base class reference during run time.
Polymorphism is one of the primary pillar of OOPs
Polymorphism can be achieved with declaring virtual in base class methods and overriding the derived class methods (Method overriding).
If we declare new instead of override in derived class then it performs method hiding.

